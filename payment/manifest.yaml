apiVersion: v1
kind: ConfigMap
metadata:
  name: payment
  namespace: roboshop  # <-- don't forget
  labels: 
    component: payment
    project: roboshop
    tier: app
data: 
  CART_HOST: "cart"     # <--- Key: "value" -- double quotes
  CART_PORT: "8080"
  USER_HOST: "user"
  USER_PORT: "8080"
  AMQP_HOST: "rabbitmq"
---
# ðŸ”Ž kubernetes pod screte
apiVersion: v1
kind: Secret
metadata:
  name: payment
  labels:
    component: payment
    project: roboshop
    tier: app
type: Opaque    #--> manam define chestunnam kabatti andhuke Opaque
data: 
  AMQP_USER: "cm9ib3Nob3A="   
  AMQP_PASS: "cm9ib3Nob3AxMjM="  # <--- Key: "value" -- double quotes
---
# ðŸ”Ž kubernetes Deployment
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: payment
  namespace: roboshop  # edi evvakapote default namespace lo run avutumdhi.
# deployment labels
  labels:
    component: payment
    project: roboshop
    tier: app
spec:
  replicas: 1
# These are the labels replica set use to create pod replicas, this should match pod labels
  selector:
    matchLabels: 
      component: payment
      project: roboshop
      tier: app
# This is pod definition
  template:
    metadata:
      labels:
        component: payment
        project: roboshop
        tier: app
    spec:
      containers: 
      - name: payment
        image: kalyantalabothula/payment:v1  # Mii Docker hub nimdi pull chesukuntumdhi, username,Password Evvakunda ante? --> Public image kabatti it will pull.  
        envFrom: 
        - configMapRef:  # <-- Environments ni configMap resourceses lo user anedi undi akkada nimdi refer chesuko, akkada unne env user dhi. 
            name: payment   
# manam separate gha kuda configMap manifest.yaml file ni pettukovachhu, but manam GitBash lo everytime manam $ kubectl apply -f configmap.yaml ani evvali. ala evvakunda manam ela chesunnam. mottam okka manifest.yaml lo petti apply chestunnam. Like config.yaml ani, Deployment.yaml ani, service.yaml ani, 3 times avvali apply ani. Andhuke manam order lo petti estunnam. 
        - SecretRef:
            name: payment
---
apiVersion: v1
kind: Service
metadata: 
  name: payment
  namespace: roboshop   # <--
  labels:
    component: payment
    project: roboshop
    tier: app
spec:
  selector:
    component: payment
    project: roboshop
    tier: app
  ports:
  - protocol: TCP
    port: 8080 # service port
    targetPort: 8080 # container Port 